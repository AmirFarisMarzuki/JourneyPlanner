@page "/updatedelivery/{Id}"
@using JourneyPlanner.Shared.Models
@inject NavigationManager NavigationManager
@inject HttpClient Http

<h1>Update Delivery</h1>
<div id="divStatus" style="display:none;">
    <label id="lblStatus"></label>
</div>
@if(delivery == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
    <div class="col-6">
        <form @onsubmit="Update">
            <div class="row">
                <div style="align-content:end; text-align:right;">
                    <button class="btn btn-primary" type="submit">Create Delivery</button>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <label class="form-control" for="DeliveryName">Delivery Name</label>
                </div>
                <div class="col-6">
                    <input class="form-control" type="text" id="DeliveryName" @bind="delivery.DeliveryName"></input>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <label class="form-control" for="DeliveryDate">Delivery Address</label>
                </div>
                <div class="col-6">
                    <input class="form-control" type="string" id="DeliveryDate" @bind="delivery.DeliveryAddress"></input>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <label><p>Latitude : @Lat</p></label>
                </div>
                <div class="col-6">
                    <label><p>Longitude : @Lng</p></label>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <label class="form-control" for="DeliveryDate">Delivery Date</label>
                </div>
                <div class="col-6">
                    <input class="form-control" type="date" id="DeliveryDate" @bind="delivery.DeliveryDate"></input>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <label class="form-control" for="DeliveryTime">Delivery Time</label>
                </div>
                <div class="col-6">
                    <input class="form-control" type="datetime" id="DeliveryTime" @bind="delivery.DeliveryTime" readonly></input>
                </div>
            </div>            
        </form>
        <div class="col-6"></div>
        <div class="col-6"></div>
    </div>
    <div class="col-6">
        <div class="row">
            <br /><br />
        </div>
        <div class="row">
            <form @onsubmit="GetLocation">
                <button class="btn btn-warning" type="submit">Get Coordinates</button>
            </form>
        </div>
        <br /><br /><br />
        <div class="row">
            
        </div>
    </div>
</div>
}

<div class="row" id="divTime">
    
</div>

@code {
    private Delivery delivery = new Delivery();
    private string Location { get; set; }
    private string Lat { get; set; }
    private string Lng { get; set; }
    private List<WeatherForecast> weatherForecasts;
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Get the current URL
        var uri = new Uri(NavigationManager.Uri);

        // Get the ID from the URL
        var segments = uri.Segments;
        if (segments.Length >= 2)
        {
            Id = segments[segments.Length - 1];
            delivery = await Http.GetFromJsonAsync<Delivery>("/api/DeliveryController/GetDelivery?Id=" + Id);
        }
        
    }

    private async Task Update()
    {
        delivery.Latitude = Lat;
        delivery.Longitude = Lng;
        var response = await Http.PutAsJsonAsync<Delivery>("/api/DeliveryController/CreateDelivery", delivery);
        if (response.IsSuccessStatusCode)
        {

        }
        else
        {
            // Handle failure
        }
    }



    private async Task GetLocation()
    {
        Location = delivery.DeliveryAddress;
        string url = $"https://nominatim.openstreetmap.org/search?q={Location}&format=json";

        try
        {
            using (var httpClient = new HttpClient())
            {
                var response = await httpClient.GetAsync(url);
                response.EnsureSuccessStatusCode();
                var data = await response.Content.ReadFromJsonAsync<dynamic[]>();

                if (data != null && data.Length > 0)
                {
                    Lat = data[0].GetProperty("lat").GetString();
                    Lng = data[0].GetProperty("lon").GetString();
                }
                else
                {
                    //CoordinatesMessage = "Location not found.";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            //CoordinatesMessage = "An error occurred while fetching location data.";
        }
    }

    private async Task GetTime()
    {
        try
        {
            if (Lat != null && Lng != null)
            {

                //using (var httpClient = new HttpClient())
                //{
                //    //httpClient.BaseAddress = new Uri("https://localhost:7288");
                //    string url = "/api/WeatherController/GetWeatherForecast?lat={" + Lat + "}&lng={"+ Lng +"}";
                //    var weatherForecasts = await httpClient.GetFromJsonAsync<WeatherForecast[]>(url);
                //    StateHasChanged();
                //}

                string url = "/api/WeatherController/GetWeatherForecast?lat={" + Lat + "}&lng={" + Lng + "}";
                var weatherForecasts = await Http.GetFromJsonAsync<WeatherForecast[]>(url);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            //CoordinatesMessage = "An error occurred while fetching location data.";
        }
    }


}

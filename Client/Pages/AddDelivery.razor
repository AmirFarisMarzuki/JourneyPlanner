@page "/delivery/Add"
@page "/delivery/Edit/{Id:int}"
@using JourneyPlanner.Shared.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>@Title Delivery</h1>
<EditForm Model="@delivery" OnValidSubmit="() => SaveDelivery()">
    <div class="mb-3">
        <label for="DeliveryDate" class="form-label">Date</label>
        <div class="col-md-4">
            <InputDate class="form-control" @bind-Value="delivery.DeliveryDate" />
        </div>
    </div>
    <div class="mb-3">
        <label for="DeliveryTime" class="form-label">Time</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="delivery.DeliveryTime" />
        </div>
    </div>
    <div class="mb-3">
        <label for="DeliveryName" class="form-label">Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="delivery.DeliveryName" />
        </div>
    </div>
    <div class="mb-3">
        <label for="DeliveryAddress" class="form-label">Address</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="delivery.DeliveryAddress"/>
        </div>
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; } = 0;
    protected string Title = "Add";
    protected Delivery delivery = new();
    private string Location { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            Title = "Edit";
            delivery = await Http.GetFromJsonAsync<Delivery>("api/Delivery/" + Id);
        }
    }   

    protected async Task SaveDelivery()
    {
        await GetLocation();
        await GetWeatherData();

        if (Id != 0)
        {
            await Http.PutAsJsonAsync("api/Delivery", delivery);
        }
        else
        {
            await Http.PostAsJsonAsync("api/Delivery", delivery);
        }
        Cancel();
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }


    private async Task GetLocation()
    {
        Location = delivery.DeliveryAddress;
        string url = $"https://nominatim.openstreetmap.org/search?q={Location}&format=json";

        try
        {
            using (var httpClient = new HttpClient())
            {
                var response = await httpClient.GetAsync(url);
                response.EnsureSuccessStatusCode();
                var data = await response.Content.ReadFromJsonAsync<dynamic[]>();

                if (data != null && data.Length > 0)
                {
                    delivery.Latitude = data[0].GetProperty("lat").GetString();
                    delivery.Longitude = data[0].GetProperty("lon").GetString();
                }
                else
                {
                    //CoordinatesMessage = "Location not found.";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            //CoordinatesMessage = "An error occurred while fetching location data.";
        }
    }

    private async Task GetWeatherData()
    {
        try
        {
            string date = delivery.DeliveryDate.Value.ToShortDateString();
            if (delivery.Latitude != null && delivery.Longitude != null)
            {

                string url = "Weather?lat={" + delivery.Latitude + "}&lng={" + delivery.Longitude + "}&date={" + date + "}&time={" + delivery.DeliveryTime + "}";
                var weatherForecasts = await Http.GetFromJsonAsync<WeatherForecast[]>(url);
                if (weatherForecasts != null && weatherForecasts.Length > 0)
                {
                    string summary = weatherForecasts[0].Summary;
                    int temp = weatherForecasts[0].Temperature;
                    string icon = GetIcon(summary);

                    delivery.Weather = icon + temp + "&#176;</h3><h5>" + summary + " at " + delivery.DeliveryTime + "</h5>";
                }

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            //CoordinatesMessage = "An error occurred while fetching location data.";
        }
    }

    private string GetIcon(string summary)
    {
        if(summary == "Clear")
        {
            return "<h3><span class=\"oi oi-sun link-warning\"></span>&nbsp;";
        }
        else if (summary == "Cold")
        {
            return "<h3><span class=\"oi oi-droplet link-primary\"></span>&nbsp;";
        }
        else if (summary == "Hazy")
        {
            return "<h3><span class=\"oi oi-menu link-secondary\"></span>&nbsp;";
        }
        else if (summary == "Rainy")
        {
            return "<h3><span class=\"oi oi-rain link-primary\"></span>&nbsp;";
        }
        else if (summary == "Hot")
        {
            return "<h3><span class=\"oi oi-fire link-danger\"></span>&nbsp;";
        }
        else if (summary == "Cloudy")
        {
            return "<h3><span class=\"oi oi-cloudy link-secondary\"></span>&nbsp;";
        }
        else if (summary == "Thunder")
        {
            return "<h3><span class=\"oi oi-bolt link-warning\"></span>&nbsp;";
        }
        else
        {
            return "";
        }
    }
}
